/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { type ParsedHelloInstruction } from '../instructions';

export const KASBAH_PROGRAM_ADDRESS =
  'ksb1AcDWRRawr7Amf9H7wCGtYvyVGNfbMvBPVAV6BJT' as Address<'ksb1AcDWRRawr7Amf9H7wCGtYvyVGNfbMvBPVAV6BJT'>;

export enum KasbahInstruction {
  Hello,
}

export function identifyKasbahInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): KasbahInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 118, 59, 220, 196, 127, 161, 179])
      ),
      0
    )
  ) {
    return KasbahInstruction.Hello;
  }
  throw new Error(
    'The provided instruction could not be identified as a kasbah instruction.'
  );
}

export type ParsedKasbahInstruction<
  TProgram extends string = 'ksb1AcDWRRawr7Amf9H7wCGtYvyVGNfbMvBPVAV6BJT',
> = {
  instructionType: KasbahInstruction.Hello;
} & ParsedHelloInstruction<TProgram>;
